# ====================== 基础配置 ======================
# 目标变量名称：你要预测的那一列的列名
target_name: "T2D"

# ====================== 特征配置 ======================
# 分类特征 (1个基础特征 + 30个生活习惯特征 = 31个)
categorical_features:
  # 基础特征
  - "f.31.0.0"    # 性别
  # 生活习惯分类特征
  - "f.1478.0.0"
  - "f.1349.0.0"
  - "f.1100.0.0"
  - "f.1628.0.0"
  - "f.1558.0.0"
  - "f.1210.0.0"
  - "f.1329.0.0"
  - "f.971.0.0"
  - "f.1110.0.0"
  - "f.20160.0.0"
  - "f.1359.0.0"
  - "f.924.0.0"
  - "f.1548.0.0"
  - "f.943.0.0"
  - "f.1170.0.0"
  - "f.2110.0.0"
  - "f.1200.0.0"
  - "f.1408.0.0"
  - "f.1369.0.0"
  - "f.1120.0.0"
  - "f.2237.0.0"
  - "f.1190.0.0"
  - "f.1249.0.0"
  - "f.1130.0.0"
  - "f.1239.0.0"
  - "f.981.0.0"
  - "f.1220.0.0"
  - "f.2634.0.0"
  - "f.1259.0.0"
  - "f.1618.0.0"

# 连续特征 (5个基础特征 + 20个生活习惯特征 = 25个)
continuous_features: 
  # 基础连续特征
  - "f.34.0.0"     # 年龄
  - "f.21022.0.0"  # BMI
  - "f.21001.0.0"  # 体重
  - "f.4079.0.0"   # 舒张压
  - "f.4080.0.0"   # 收缩压
  # 生活习惯连续特征
  - "f.2277.0.0"
  - "f.1269.0.0"
  - "f.1160.0.0"
  - "f.2139.0.0"
  - "f.1050.0.0"
  - "f.20077.0.0"
  - "f.1060.0.0"
  - "f.874.0.0"
  - "f.1309.0.0"
  - "f.1279.0.0"
  - "f.1598.0.0"
  - "f.1458.0.0"
  - "f.2149.0.0"
  - "f.914.0.0"
  - "f.1299.0.0"
  - "f.1578.0.0"
  - "f.1070.0.0"
  - "f.1319.0.0"
  - "f.1289.0.0"
  - "f.1568.0.0"

# 索引列：用于标识每条数据的唯一ID
# 如果你的数据集有ID列（如用户ID、订单ID等），就在这里指定
index_col: "f.eid"



# ====================== 数据配置 ======================
# 随机种子：确保实验可以重复
seed: 42

# 数据文件配置
data_dir: "data"            # 指向data目录
train_file: "train/train_merged.csv"     # 相对于data目录的路径
test_file: "test/test_merged.csv"       # 相对于data目录的路径

# 训练集分割配置：将训练数据分成训练集和验证集
train_test_split: 
  test_size: 0.1        # 使用10%的数据作为验证集
  shuffle: true          # 是否打乱数据顺序（建议true）
  stratify: true        # 保持类别比例

# ====================== 模型配置 ======================
# 模型类型：这里使用的是特征标记化的Transformer模型
model_class: "feature_tokenizer_transformer"
model_kwargs:
  # 模型结构参数
  output_dim: 1          # 二分类任务
  embedding_dim: 32      # 降低维度，因为特征较少
  nhead: 4
  num_layers: 2
  dim_feedforward: 64
  
  # MLP（多层感知机）配置
  mlp_hidden_dims:      
    - 32
    - 16
  
  # 激活函数和正则化
  activation: 'gelu'    # 激活函数类型：gelu通常比relu表现更好
  attn_dropout_rate: 0.1  # 注意力层的dropout率：防止过拟合
  ffn_dropout_rate: 0.1   # 前馈网络的dropout率：防止过拟合

# ====================== 训练配置 ======================
# 损失函数配置
loss_function: "binary_cross_entropy"
loss_kwargs: null            # 损失函数的额外参数

# 优化器配置
optim: "adamw"                 # 优化器类型：adamw是当前最常用的优化器
optim_kwargs:
  lr: 5.0e-4                # 学习率：决定参数更新的步长
  weight_decay: 0.01         # 权重衰减：用于防止过拟合

# 学习率调度器配置：动态调整学习率
lr_scheduler: "reduce_on_plateau"  # 当性能不再提升时降低学习率
lr_scheduler_kwargs: 
  mode: "max"                 # 监控指标的模式：是越小越好还是越大越好
  factor: 0.5                 # 学习率调整因子：每次调整将学习率乘以0.5
  patience: 5                 # 容忍多少个epoch性能不提升
lr_scheduler_by_custom_metric: true  # 是否使用自定义指标来调整学习率

# 训练超参数
train_batch_size: 64       # 训练时的批次大小
eval_batch_size: 128        # 评估时的批次大小
epochs: 50                 # 总训练轮数

# ====================== 训练控制 ======================
# 早停设置：防止过拟合
early_stopping: true        # 是否启用早停
early_stopping_patience: 10  # 当性能多少轮不提升就停止训练
early_stopping_start_from: 5  # 从第几轮开始启用早停

# 评估指标配置
custom_metric: "auc"     # 使用AUC作为评估指标
is_greater_better: true  # AUC是越大越好

# ====================== 输出配置 ======================
# 预测结果输出配置
to_submssion: true         # 是否生成预测结果文件
submission_file: "task1_submission.csv"  # 预测结果文件名